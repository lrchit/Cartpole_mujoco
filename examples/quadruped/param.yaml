
nx: 36
nu: 12
nq: 18
nv: 18

# simulator initial state
initial_state : [-0.1, 1.1, -2.6,
                  0.1, 1.1, -2.6,
                 -0.1, 1.1, -2.6,
                  0.1, 1.1, -2.6]

# solver initial state
q_init : [ 0.0, 0.0, 0.3,        # base position
           0.0, 0.6, 0.0,        # base orientation
           0.1, 0.72, -1.44,
          -0.1, 0.72, -1.44,
           0.1, 0.72, -1.44,
          -0.1, 0.72, -1.44]

v_init : [0, 0, 0,
          0, 0, 0, 
          0, 0, 0,
          0, 0, 0,
          0, 0, 0,
          0, 0, 0]

# Initial guess. The initial sequence of generalized positions is generated by
# linearly iterpolating between q_init and q_guess.
q_target : [0.0, 0.0, 0.3,        # base position
            0.0, 0.0, 0.0,        # base orientation
            0.1, 0.72, -1.44,
           -0.1, 0.72, -1.44,
            0.1, 0.72, -1.44,
           -0.1, 0.72, -1.44]

# Cost Weights
Qq : [10, 10, 10, 
      10, 10, 10,
      0, 0, 0,
      0, 0, 0,
      0, 0, 0,
      0, 0, 0]

Qv : [1, 1, 1,
      1, 1, 1, 
      0.1, 0.1, 0.1,
      0.1, 0.1, 0.1,
      0.1, 0.1, 0.1,
      0.1, 0.1, 0.1]

R : [100, 100, 100,
     100, 100, 100, 
     0.001, 0.001, 0.001,
     0.001, 0.001, 0.001,
     0.001, 0.001, 0.001,
     0.001, 0.001, 0.001]

Qfq : [10, 10, 10, 
      10, 10, 10,
      1, 1, 1,
      1, 1, 1,
      1, 1, 1,
      1, 1, 1]

Qfv : [1, 1, 1,
      1, 1, 1, 
      0.1, 0.1, 0.1,
      0.1, 0.1, 0.1,
      0.1, 0.1, 0.1,
      0.1, 0.1, 0.1]

# Solver parameters
method : 1    # solver method, {linesearch, trust_region}
scaling : true
equality_constraints : false
linear_solver : 1 # linear solver method, {kDenseLdlt, kPentaDiagonalLu}
num_threads : 4

# Convergence thresholds
tolerances:
  rel_cost_reduction: 0
  abs_cost_reduction: 0
  rel_gradient_along_dq: 0
  abs_gradient_along_dq: 0
  rel_state_change: 0
  abs_state_change: 0

# Method used to compute gradients of inverse dynamics, one of
gradients_method: 0    # {forward_differences, central_differences, central_differences4, autodiff}

# Contact model parameters. 
contact_stiffness : 2000    # normal force stiffness, in N/m
dissipation_velocity : 0.1  # Hunt & Crossley-like model parameter, in m/s.

# Amount of smoothing (and therefore force at a distance) to apply when
# computing normal forces. This is equivalent to an analytical version of
# randomized smoothing, assuming that signed distances are drawn from a logistic
# distirbution with the smoothing factor as the scale parameter. Higher values
# mean more smoothing and more force at a distance. 
smoothing_factor : 0.01

# Friction
friction_coefficient : 0.5  # Coefficient of friction.
stiction_velocity: 0.5      # Regularization velocity, in m/s.

k_spring : 100
d_damper : 100
damper_smooth : 200
spring_smooth : 100
zOffset : -0.02

which_contact_model : 1  # 0 = soft; 1 = spring-damper

# mpc settings
dt: 0.02
horizon: 50
mpcFrequency: 100
mrtFrequency: 500
useFeedbackPolicy: true

mpc_iters : 1
Kp : [50, 50, 50,
      50, 50, 50,
      50, 50, 50,
      50, 50, 50]
Kd : [2, 2, 2,
      2, 2, 2,
      2, 2, 2,
      2, 2, 2]
